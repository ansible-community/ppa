---
name: ansible-core
on:
  workflow_dispatch:
    inputs:
      DEB_ARCH:
        required: true
        default: amd64
      DEB_DIST:
        required: true
      DEB_RELEASE:
        required: true
        default: 1ppa
      DEB_VERSION:
        required: true
      LAUNCHPAD_PROJECT:
        required: true
      LAUNCHPAD_PPA:
        required: true
      JINJA2_VERSION:
        required: true
        default: 3.1.2
      RESOLVELIB_VERSION:
        required: true
        default: 0.8.0
jobs:
  build_ansible_core:
    name: Build ansible-core
    runs-on: ubuntu-latest
    env:
      DEB_NAME: ansible-core
      DEB_ARCH: ${{ github.event.inputs.DEB_ARCH }}
      DEB_DIST: ${{ github.event.inputs.DEB_DIST }}
      DEB_RELEASE: ${{ github.event.inputs.DEB_RELEASE }}
      DEB_VERSION: ${{ github.event.inputs.DEB_VERSION }}
      LAUNCHPAD_PROJECT: ${{ github.event.inputs.LAUNCHPAD_PROJECT }}
      LAUNCHPAD_PPA: ${{ github.event.inputs.LAUNCHPAD_PPA }}
      JINJA2_VERSION: ${{ github.event.inputs.JINJA2_VERSION }}
      RESOLVELIB_VERSION: ${{ github.event.inputs.RESOLVELIB_VERSION }}
    steps:
      - name: checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: run the setup action
        uses: ./.github/actions
        with:
          LAUNCHPAD_PROJECT: ${{ github.event.inputs.LAUNCHPAD_PROJECT }}
          LAUNCHPAD_PPA: ${{ github.event.inputs.LAUNCHPAD_PPA }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_OWNERTRUST: ${{ secrets.SIGNING_OWNERTRUST }}

      - name: build
        env:
          DEBSIGN_KEYID: ${{ secrets.DEBSIGN_KEYID }}
          DEBSIGN_PROGRAM: gpg --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase
          OFFICIAL: yes
          TARBALL_BASE_URL: https://pypi.python.org/packages/source
        run: |
          echo "DEB_NAME=${DEB_NAME}"
          echo "DEB_ARCH=${DEB_ARCH}"
          echo "DEB_DIST=${DEB_DIST}"
          echo "DEB_RELEASE=${DEB_RELEASE}"
          echo "DEB_VERSION=${DEB_VERSION}"
          echo "LAUNCHPAD_PROJECT=${LAUNCHPAD_PROJECT}"
          echo "LAUNCHPAD_PPA=${LAUNCHPAD_PPA}"
          echo "RESOLVELIB_VERSION=${RESOLVELIB_VERSION}"

          # handle different release types better in the changelog
          DEB_VERSION_EXTRA=$(echo "${DEB_VERSION}" | grep -Po '[a-z]+.*' || true)

          if [[ -n "${DEB_VERSION_EXTRA}" ]]; then
            DEB_VERSION_BASE=$(echo "${DEB_VERSION}" | grep -Po '^[\d+\.]+')
            export DEB_CHANGELOG_VERSION="${DEB_VERSION_BASE}"~"${DEB_VERSION_EXTRA}"
          else
            export DEB_CHANGELOG_VERSION="${DEB_VERSION}"
          fi

          sudo apt -y install software-properties-common
          #sudo add-apt-repository --yes --update ppa:"${LAUNCHPAD_PROJECT}"/"${LAUNCHPAD_PPA}"

          sudo apt -y install make python3 python3-packaging python3-setuptools python3-straight.plugin python3-yaml python3-docutils devscripts cdbs debhelper dh-python

          mkdir -p "${HOME}"/"${DEB_NAME}" && cd "$_" || exit
          rm -rf "${DEB_NAME}"-"${DEB_VERSION}"*
          wget "${TARBALL_BASE_URL}"/"${DEB_NAME:0:1}"/"${DEB_NAME}"/"${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          tar -xzf "${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          cd "${DEB_NAME}"-"${DEB_VERSION}" || exit
          _ANSIBLE_SDIST_FROM_MAKEFILE=1 python3 setup.py sdist --dist-dir=dist

          DATE=$(date -R)
          export DATE

          for DIST in ${DEB_DIST}; do
            export DIST

            mkdir -p deb-build/"${DIST}"
            tar -C deb-build/"${DIST}" -xzf dist/"${DEB_NAME}"-"${DEB_VERSION}".tar.gz
            mkdir deb-build/"${DIST}"/"${DEB_NAME}"-"${DEB_VERSION}"/debian
            envsubst < "${HOME}"/work/ppa/ppa/"${DEB_NAME}"/templates/changelog > deb-build/"${DIST}"/"${DEB_NAME}"-"${DEB_VERSION}"/debian/changelog
            
            # overwrite debian files using this repo's files
            cp -a "${HOME}"/work/ppa/ppa/"${DEB_NAME}"/debian/* deb-build/"${DIST}"/"${DEB_NAME}"-"${DEB_VERSION}"/debian/

            chmod +x deb-build/"${DIST}"/"${DEB_NAME}"-"${DEB_VERSION}"/debian/rules
            cd deb-build/"${DIST}"/"${DEB_NAME}"-"${DEB_VERSION}" || exit

            if [ "${DIST}" == "focal" ] || [ "${DIST}" == "impish" ]; then
              cp -a "${HOME}"/work/ppa/ppa/"${DEB_NAME}"/control_file/control_focal_impish ./debian/control
              pip install --upgrade -t ./lib/ansible/_vendor/ jinja2=="${JINJA2_VERSION}" resolvelib=="${RESOLVELIB_VERSION}"
              export DEST=usr/lib/python3/dist-packages/ansible/_vendor
              echo "lib/ansible/_vendor/Jinja2-${JINJA2_VERSION}.dist-info ${DEST}" >> ./debian/ansible-core.install
              echo "lib/ansible/_vendor/MarkupSafe-2.1.1.dist-info ${DEST}" >> ./debian/ansible-core.install
              echo "lib/ansible/_vendor/resolvelib-${RESOLVELIB_VERSION}.dist-info ${DEST}" >> ./debian/ansible-core.install
            else
              cp -a "${HOME}"/work/ppa/ppa/"${DEB_NAME}"/control_file/control ./debian/control
            fi

            debuild --source-option='-I' -S -k"${DEBSIGN_KEYID}" -p"$(echo "${DEBSIGN_PROGRAM}" | envsubst)"
            cd - || exit
            dput "${LAUNCHPAD_PPA}" deb-build/"${DIST}"/"${DEB_NAME}"_"${DEB_CHANGELOG_VERSION}"-"${DEB_RELEASE}"~"${DIST}"_source.changes
          done
